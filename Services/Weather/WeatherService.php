<?php

namespace Weather;

/*
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface WeatherServiceIf
{
    /**
     * @param int  $internal
     * @param int  $language
     * @param bool $isShort
     *
     * @return \Bean\Condition
     */
    public function getCondition($internal, $language, $isShort);
    /**
     * @param int $internal
     * @param int $language
     *
     * @return \Bean\Aqi
     */
    public function getAqi($internal, $language);
    /**
     * @param int $internal
     * @param int $language
     *
     * @return array
     */
    public function getIndexMap($internal, $language);
    /**
     * @param int $internal
     * @param int $language
     *
     * @return \Bean\Forecast[]
     */
    public function getForecastList($internal, $language);
    /**
     * @param int $internal
     * @param int $language
     *
     * @return \Bean\Hourly[]
     */
    public function getHourlyList($internal, $language);
    /**
     * @param int    $internal
     * @param string $date
     *
     * @return \Bean\LimitTail
     */
    public function getLimitTail($internal, $date);
    /**
     * @param int $internal
     * @param int $language
     *
     * @return \Bean\Alert[]
     */
    public function getAlert($internal, $language);
    /**
     * @param int $internal
     *
     * @return \Bean\City
     */
    public function getCity($internal);
    /**
     * @param int    $language
     * @param string $date
     *
     * @return \Bean\Festival[]
     */
    public function getFestival($language, $date);
    /**
     * @param int $internal
     * @param int $language
     *
     * @return \Bean\Forecast[]
     */
    public function getForecastListFifteen($internal, $language);
    /**
     * @param int  $internal
     * @param int  $language
     * @param bool $isShort
     *
     * @return \Bean\ConditionAndAqi
     */
    public function getConditionAndAqi($internal, $language, $isShort);
    /**
     * @param int $internal
     * @param int $language
     *
     * @return \Bean\Forecast
     */
    public function getForecast($internal, $language);
}

class WeatherServiceClient implements \Weather\WeatherServiceIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }

    public function getCondition($internal, $language, $isShort)
    {
        $this->send_getCondition($internal, $language, $isShort);

        return $this->recv_getCondition();
    }

    public function send_getCondition($internal, $language, $isShort)
    {
        $args = new \Weather\WeatherService_getCondition_args();
        $args->internal = $internal;
        $args->language = $language;
        $args->isShort = $isShort;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getCondition', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getCondition', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getCondition()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getCondition_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getCondition_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getCondition failed: unknown result');
    }

    public function getAqi($internal, $language)
    {
        $this->send_getAqi($internal, $language);

        return $this->recv_getAqi();
    }

    public function send_getAqi($internal, $language)
    {
        $args = new \Weather\WeatherService_getAqi_args();
        $args->internal = $internal;
        $args->language = $language;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getAqi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getAqi', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getAqi()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getAqi_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getAqi_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getAqi failed: unknown result');
    }

    public function getIndexMap($internal, $language)
    {
        $this->send_getIndexMap($internal, $language);

        return $this->recv_getIndexMap();
    }

    public function send_getIndexMap($internal, $language)
    {
        $args = new \Weather\WeatherService_getIndexMap_args();
        $args->internal = $internal;
        $args->language = $language;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getIndexMap', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getIndexMap', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getIndexMap()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getIndexMap_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getIndexMap_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getIndexMap failed: unknown result');
    }

    public function getForecastList($internal, $language)
    {
        $this->send_getForecastList($internal, $language);

        return $this->recv_getForecastList();
    }

    public function send_getForecastList($internal, $language)
    {
        $args = new \Weather\WeatherService_getForecastList_args();
        $args->internal = $internal;
        $args->language = $language;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getForecastList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getForecastList', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getForecastList()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getForecastList_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getForecastList_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getForecastList failed: unknown result');
    }

    public function getHourlyList($internal, $language)
    {
        $this->send_getHourlyList($internal, $language);

        return $this->recv_getHourlyList();
    }

    public function send_getHourlyList($internal, $language)
    {
        $args = new \Weather\WeatherService_getHourlyList_args();
        $args->internal = $internal;
        $args->language = $language;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getHourlyList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getHourlyList', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getHourlyList()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getHourlyList_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getHourlyList_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getHourlyList failed: unknown result');
    }

    public function getLimitTail($internal, $date)
    {
        $this->send_getLimitTail($internal, $date);

        return $this->recv_getLimitTail();
    }

    public function send_getLimitTail($internal, $date)
    {
        $args = new \Weather\WeatherService_getLimitTail_args();
        $args->internal = $internal;
        $args->date = $date;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getLimitTail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getLimitTail', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getLimitTail()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getLimitTail_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getLimitTail_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getLimitTail failed: unknown result');
    }

    public function getAlert($internal, $language)
    {
        $this->send_getAlert($internal, $language);

        return $this->recv_getAlert();
    }

    public function send_getAlert($internal, $language)
    {
        $args = new \Weather\WeatherService_getAlert_args();
        $args->internal = $internal;
        $args->language = $language;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getAlert', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getAlert', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getAlert()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getAlert_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getAlert_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getAlert failed: unknown result');
    }

    public function getCity($internal)
    {
        $this->send_getCity($internal);

        return $this->recv_getCity();
    }

    public function send_getCity($internal)
    {
        $args = new \Weather\WeatherService_getCity_args();
        $args->internal = $internal;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getCity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getCity', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getCity()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getCity_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getCity_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getCity failed: unknown result');
    }

    public function getFestival($language, $date)
    {
        $this->send_getFestival($language, $date);

        return $this->recv_getFestival();
    }

    public function send_getFestival($language, $date)
    {
        $args = new \Weather\WeatherService_getFestival_args();
        $args->language = $language;
        $args->date = $date;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getFestival', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getFestival', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getFestival()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getFestival_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getFestival_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getFestival failed: unknown result');
    }

    public function getForecastListFifteen($internal, $language)
    {
        $this->send_getForecastListFifteen($internal, $language);

        return $this->recv_getForecastListFifteen();
    }

    public function send_getForecastListFifteen($internal, $language)
    {
        $args = new \Weather\WeatherService_getForecastListFifteen_args();
        $args->internal = $internal;
        $args->language = $language;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getForecastListFifteen', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getForecastListFifteen', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getForecastListFifteen()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getForecastListFifteen_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getForecastListFifteen_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getForecastListFifteen failed: unknown result');
    }

    public function getConditionAndAqi($internal, $language, $isShort)
    {
        $this->send_getConditionAndAqi($internal, $language, $isShort);

        return $this->recv_getConditionAndAqi();
    }

    public function send_getConditionAndAqi($internal, $language, $isShort)
    {
        $args = new \Weather\WeatherService_getConditionAndAqi_args();
        $args->internal = $internal;
        $args->language = $language;
        $args->isShort = $isShort;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getConditionAndAqi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getConditionAndAqi', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getConditionAndAqi()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getConditionAndAqi_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getConditionAndAqi_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getConditionAndAqi failed: unknown result');
    }

    public function getForecast($internal, $language)
    {
        $this->send_getForecast($internal, $language);

        return $this->recv_getForecast();
    }

    public function send_getForecast($internal, $language)
    {
        $args = new \Weather\WeatherService_getForecast_args();
        $args->internal = $internal;
        $args->language = $language;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'getForecast', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('getForecast', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getForecast()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\Weather\WeatherService_getForecast_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Weather\WeatherService_getForecast_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception('getForecast failed: unknown result');
    }
}

// HELPER FUNCTIONS AND STRUCTURES

class WeatherService_getCondition_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;
    /**
     * @var bool
     */
    public $isShort = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            3 => array(
            'var' => 'isShort',
            'type' => TType::BOOL,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
            if (isset($vals['isShort'])) {
                $this->isShort = $vals['isShort'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getCondition_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isShort);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getCondition_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isShort !== null) {
            $xfer += $output->writeFieldBegin('isShort', TType::BOOL, 3);
            $xfer += $output->writeBool($this->isShort);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getCondition_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\Condition
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::STRUCT,
            'class' => '\Bean\Condition',
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getCondition_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \Bean\Condition();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getCondition_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getAqi_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getAqi_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getAqi_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getAqi_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\Aqi
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::STRUCT,
            'class' => '\Bean\Aqi',
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getAqi_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \Bean\Aqi();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getAqi_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getIndexMap_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getIndexMap_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getIndexMap_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getIndexMap_result
{
    public static $_TSPEC;

    /**
     * @var array
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::STRUCT,
            'key' => array(
            'type' => TType::I32,
            ),
            'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Bean\Index',
            ),
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getIndexMap_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::MAP) {
                        $this->success = array();
                        $_size0 = 0;
                        $_ktype1 = 0;
                        $_vtype2 = 0;
                        $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $key5 = 0;
                            $val6 = new \Bean\Index();
                            $xfer += $input->readI32($key5);
                            $val6 = new \Bean\Index();
                            $xfer += $val6->read($input);
                            $this->success[$key5] = $val6;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getIndexMap_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
            {
            $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->success));
            {
            foreach ($this->success as $kiter7 => $viter8) {
                $xfer += $output->writeI32($kiter7);
                $xfer += $viter8->write($output);
            }
            }
            $output->writeMapEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getForecastList_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getForecastList_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getForecastList_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getForecastList_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\Forecast[]
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Bean\Forecast',
            ),
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getForecastList_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::LST) {
                        $this->success = array();
                        $_size9 = 0;
                        $_etype12 = 0;
                        $xfer += $input->readListBegin($_etype12, $_size9);
                        for ($_i13 = 0; $_i13 < $_size9; ++$_i13) {
                            $elem14 = null;
                            $elem14 = new \Bean\Forecast();
                            $xfer += $elem14->read($input);
                            $this->success [] = $elem14;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getForecastList_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
            $output->writeListBegin(TType::STRUCT, count($this->success));
            {
            foreach ($this->success as $iter15) {
                $xfer += $iter15->write($output);
            }
            }
            $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getHourlyList_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getHourlyList_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getHourlyList_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getHourlyList_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\Hourly[]
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Bean\Hourly',
            ),
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getHourlyList_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::LST) {
                        $this->success = array();
                        $_size16 = 0;
                        $_etype19 = 0;
                        $xfer += $input->readListBegin($_etype19, $_size16);
                        for ($_i20 = 0; $_i20 < $_size16; ++$_i20) {
                            $elem21 = null;
                            $elem21 = new \Bean\Hourly();
                            $xfer += $elem21->read($input);
                            $this->success [] = $elem21;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getHourlyList_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
            $output->writeListBegin(TType::STRUCT, count($this->success));
            {
            foreach ($this->success as $iter22) {
                $xfer += $iter22->write($output);
            }
            }
            $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getLimitTail_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var string
     */
    public $date = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'date',
            'type' => TType::STRING,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['date'])) {
                $this->date = $vals['date'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getLimitTail_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->date);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getLimitTail_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->date !== null) {
            $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
            $xfer += $output->writeString($this->date);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getLimitTail_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\LimitTail
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::STRUCT,
            'class' => '\Bean\LimitTail',
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getLimitTail_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \Bean\LimitTail();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getLimitTail_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getAlert_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getAlert_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getAlert_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getAlert_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\Alert[]
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Bean\Alert',
            ),
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getAlert_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::LST) {
                        $this->success = array();
                        $_size23 = 0;
                        $_etype26 = 0;
                        $xfer += $input->readListBegin($_etype26, $_size23);
                        for ($_i27 = 0; $_i27 < $_size23; ++$_i27) {
                            $elem28 = null;
                            $elem28 = new \Bean\Alert();
                            $xfer += $elem28->read($input);
                            $this->success [] = $elem28;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getAlert_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
            $output->writeListBegin(TType::STRUCT, count($this->success));
            {
            foreach ($this->success as $iter29) {
                $xfer += $iter29->write($output);
            }
            }
            $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getCity_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getCity_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getCity_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getCity_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\City
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::STRUCT,
            'class' => '\Bean\City',
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getCity_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \Bean\City();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getCity_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getFestival_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $language = null;
    /**
     * @var string
     */
    public $date = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            2 => array(
            'var' => 'date',
            'type' => TType::STRING,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
            if (isset($vals['date'])) {
                $this->date = $vals['date'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getFestival_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->date);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getFestival_args');
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 1);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->date !== null) {
            $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
            $xfer += $output->writeString($this->date);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getFestival_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\Festival[]
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Bean\Festival',
            ),
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getFestival_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::LST) {
                        $this->success = array();
                        $_size30 = 0;
                        $_etype33 = 0;
                        $xfer += $input->readListBegin($_etype33, $_size30);
                        for ($_i34 = 0; $_i34 < $_size30; ++$_i34) {
                            $elem35 = null;
                            $elem35 = new \Bean\Festival();
                            $xfer += $elem35->read($input);
                            $this->success [] = $elem35;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getFestival_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
            $output->writeListBegin(TType::STRUCT, count($this->success));
            {
            foreach ($this->success as $iter36) {
                $xfer += $iter36->write($output);
            }
            }
            $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getForecastListFifteen_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getForecastListFifteen_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getForecastListFifteen_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getForecastListFifteen_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\Forecast[]
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Bean\Forecast',
            ),
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getForecastListFifteen_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::LST) {
                        $this->success = array();
                        $_size37 = 0;
                        $_etype40 = 0;
                        $xfer += $input->readListBegin($_etype40, $_size37);
                        for ($_i41 = 0; $_i41 < $_size37; ++$_i41) {
                            $elem42 = null;
                            $elem42 = new \Bean\Forecast();
                            $xfer += $elem42->read($input);
                            $this->success [] = $elem42;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getForecastListFifteen_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
            $output->writeListBegin(TType::STRUCT, count($this->success));
            {
            foreach ($this->success as $iter43) {
                $xfer += $iter43->write($output);
            }
            }
            $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getConditionAndAqi_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;
    /**
     * @var bool
     */
    public $isShort = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            3 => array(
            'var' => 'isShort',
            'type' => TType::BOOL,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
            if (isset($vals['isShort'])) {
                $this->isShort = $vals['isShort'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getConditionAndAqi_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isShort);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getConditionAndAqi_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isShort !== null) {
            $xfer += $output->writeFieldBegin('isShort', TType::BOOL, 3);
            $xfer += $output->writeBool($this->isShort);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getConditionAndAqi_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\ConditionAndAqi
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::STRUCT,
            'class' => '\Bean\ConditionAndAqi',
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getConditionAndAqi_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \Bean\ConditionAndAqi();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getConditionAndAqi_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getForecast_args
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $internal = null;
    /**
     * @var int
     */
    public $language = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            1 => array(
            'var' => 'internal',
            'type' => TType::I64,
            ),
            2 => array(
            'var' => 'language',
            'type' => TType::I32,
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getForecast_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->internal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getForecast_args');
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 1);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::I32, 2);
            $xfer += $output->writeI32($this->language);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherService_getForecast_result
{
    public static $_TSPEC;

    /**
     * @var \Bean\Forecast
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            0 => array(
            'var' => 'success',
            'type' => TType::STRUCT,
            'class' => '\Bean\Forecast',
            ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'WeatherService_getForecast_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \Bean\Forecast();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('WeatherService_getForecast_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class WeatherServiceProcessor
{
    protected $handler_ = null;
    public function __construct($handler)
    {
        $this->handler_ = $handler;
    }

    public function process($input, $output)
    {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $input->readMessageBegin($fname, $mtype, $rseqid);
        $methodname = 'process_'.$fname;
        if (!method_exists($this, $methodname)) {
            $input->skip(TType::STRUCT);
            $input->readMessageEnd();
            $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
            $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
            $x->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();

            return;
        }
        $this->$methodname($rseqid, $input, $output);

        return true;
    }

    protected function process_getCondition($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getCondition_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getCondition_result();
        $result->success = $this->handler_->getCondition($args->internal, $args->language, $args->isShort);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getCondition', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getCondition', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getAqi($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getAqi_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getAqi_result();
        $result->success = $this->handler_->getAqi($args->internal, $args->language);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getAqi', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getAqi', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getIndexMap($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getIndexMap_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getIndexMap_result();
        $result->success = $this->handler_->getIndexMap($args->internal, $args->language);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getIndexMap', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getIndexMap', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getForecastList($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getForecastList_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getForecastList_result();
        $result->success = $this->handler_->getForecastList($args->internal, $args->language);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getForecastList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getForecastList', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getHourlyList($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getHourlyList_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getHourlyList_result();
        $result->success = $this->handler_->getHourlyList($args->internal, $args->language);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getHourlyList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getHourlyList', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getLimitTail($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getLimitTail_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getLimitTail_result();
        $result->success = $this->handler_->getLimitTail($args->internal, $args->date);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getLimitTail', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getLimitTail', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getAlert($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getAlert_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getAlert_result();
        $result->success = $this->handler_->getAlert($args->internal, $args->language);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getAlert', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getAlert', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getCity($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getCity_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getCity_result();
        $result->success = $this->handler_->getCity($args->internal);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getCity', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getCity', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getFestival($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getFestival_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getFestival_result();
        $result->success = $this->handler_->getFestival($args->language, $args->date);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getFestival', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getFestival', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getForecastListFifteen($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getForecastListFifteen_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getForecastListFifteen_result();
        $result->success = $this->handler_->getForecastListFifteen($args->internal, $args->language);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getForecastListFifteen', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getForecastListFifteen', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getConditionAndAqi($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getConditionAndAqi_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getConditionAndAqi_result();
        $result->success = $this->handler_->getConditionAndAqi($args->internal, $args->language, $args->isShort);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getConditionAndAqi', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getConditionAndAqi', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_getForecast($seqid, $input, $output)
    {
        $args = new \Weather\WeatherService_getForecast_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new \Weather\WeatherService_getForecast_result();
        $result->success = $this->handler_->getForecast($args->internal, $args->language);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'getForecast', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('getForecast', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
}
