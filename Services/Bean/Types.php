<?php

namespace Bean;

/*
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Type\TType;
use Thrift\Exception\TProtocolException;

final class Language
{
    const LANG_ZH = 1;
    const LANG_EN = 2;
    const LANG_TW = 4;
    const LANG_HK = 8;
    public static $__names = array(
    1 => 'LANG_ZH',
    2 => 'LANG_EN',
    4 => 'LANG_TW',
    8 => 'LANG_HK',
  );
}

final class MOONPHASE
{
    const MOON_NEW = 1;
    const MOON_WAXINGCRESCENT = 2;
    const MOON_FIRST = 3;
    const MOON_WAXINGGIBBOUS = 4;
    const MOON_FULL = 5;
    const MOON_WANINGGIBBOUS = 6;
    const MOON_LAST = 7;
    const MOON_WANINGCRESCENT = 8;
    public static $__names = array(
    1 => 'MOON_NEW',
    2 => 'MOON_WAXINGCRESCENT',
    3 => 'MOON_FIRST',
    4 => 'MOON_WAXINGGIBBOUS',
    5 => 'MOON_FULL',
    6 => 'MOON_WANINGGIBBOUS',
    7 => 'MOON_LAST',
    8 => 'MOON_WANINGCRESCENT',
  );
}

class Condition
{
    public static $_TSPEC;

  /**
   * @var int
   */
  public $temperature = null;
  /**
   * @var string
   */
  public $condition = null;
  /**
   * @var int
   */
  public $icon = null;
  /**
   * @var int
   */
  public $humidity = null;
  /**
   * @var int
   */
  public $pressure = null;
  /**
   * @var int
   */
  public $windLevel = null;
  /**
   * @var float
   */
  public $windSpeed = null;
  /**
   * @var string
   */
  public $windDir = null;
  /**
   * @var string
   */
  public $uvi = null;
  /**
   * @var \Bean\Sun
   */
  public $sun = null;
  /**
   * @var int
   */
  public $updatetime = null;
  /**
   * @var int
   */
  public $weatherCode = null;
  /**
   * @var int
   */
  public $bgCode = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'temperature',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'condition',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'icon',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'humidity',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'pressure',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'windLevel',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'windSpeed',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'windDir',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'uvi',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'sun',
          'type' => TType::STRUCT,
          'class' => '\Bean\Sun',
          ),
        11 => array(
          'var' => 'updatetime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'weatherCode',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'bgCode',
          'type' => TType::I32,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['temperature'])) {
                $this->temperature = $vals['temperature'];
            }
            if (isset($vals['condition'])) {
                $this->condition = $vals['condition'];
            }
            if (isset($vals['icon'])) {
                $this->icon = $vals['icon'];
            }
            if (isset($vals['humidity'])) {
                $this->humidity = $vals['humidity'];
            }
            if (isset($vals['pressure'])) {
                $this->pressure = $vals['pressure'];
            }
            if (isset($vals['windLevel'])) {
                $this->windLevel = $vals['windLevel'];
            }
            if (isset($vals['windSpeed'])) {
                $this->windSpeed = $vals['windSpeed'];
            }
            if (isset($vals['windDir'])) {
                $this->windDir = $vals['windDir'];
            }
            if (isset($vals['uvi'])) {
                $this->uvi = $vals['uvi'];
            }
            if (isset($vals['sun'])) {
                $this->sun = $vals['sun'];
            }
            if (isset($vals['updatetime'])) {
                $this->updatetime = $vals['updatetime'];
            }
            if (isset($vals['weatherCode'])) {
                $this->weatherCode = $vals['weatherCode'];
            }
            if (isset($vals['bgCode'])) {
                $this->bgCode = $vals['bgCode'];
            }
        }
    }

    public function getName()
    {
        return 'Condition';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->temperature);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->condition);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->icon);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->humidity);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->pressure);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->windLevel);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
              $xfer += $input->readDouble($this->windSpeed);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->windDir);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->uvi);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
              $this->sun = new \Bean\Sun();
              $xfer += $this->sun->read($input);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->updatetime);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->weatherCode);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->bgCode);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Condition');
        if ($this->temperature !== null) {
            $xfer += $output->writeFieldBegin('temperature', TType::I32, 1);
            $xfer += $output->writeI32($this->temperature);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->condition !== null) {
            $xfer += $output->writeFieldBegin('condition', TType::STRING, 2);
            $xfer += $output->writeString($this->condition);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->icon !== null) {
            $xfer += $output->writeFieldBegin('icon', TType::I32, 3);
            $xfer += $output->writeI32($this->icon);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->humidity !== null) {
            $xfer += $output->writeFieldBegin('humidity', TType::I32, 4);
            $xfer += $output->writeI32($this->humidity);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pressure !== null) {
            $xfer += $output->writeFieldBegin('pressure', TType::I32, 5);
            $xfer += $output->writeI32($this->pressure);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windLevel !== null) {
            $xfer += $output->writeFieldBegin('windLevel', TType::I32, 6);
            $xfer += $output->writeI32($this->windLevel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windSpeed !== null) {
            $xfer += $output->writeFieldBegin('windSpeed', TType::DOUBLE, 7);
            $xfer += $output->writeDouble($this->windSpeed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windDir !== null) {
            $xfer += $output->writeFieldBegin('windDir', TType::STRING, 8);
            $xfer += $output->writeString($this->windDir);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uvi !== null) {
            $xfer += $output->writeFieldBegin('uvi', TType::STRING, 9);
            $xfer += $output->writeString($this->uvi);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sun !== null) {
            if (!is_object($this->sun)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sun', TType::STRUCT, 10);
            $xfer += $this->sun->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updatetime !== null) {
            $xfer += $output->writeFieldBegin('updatetime', TType::I64, 11);
            $xfer += $output->writeI64($this->updatetime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->weatherCode !== null) {
            $xfer += $output->writeFieldBegin('weatherCode', TType::I32, 12);
            $xfer += $output->writeI32($this->weatherCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bgCode !== null) {
            $xfer += $output->writeFieldBegin('bgCode', TType::I32, 13);
            $xfer += $output->writeI32($this->bgCode);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class Sun
{
    public static $_TSPEC;

  /**
   * @var int
   */
  public $sunRise = null;
  /**
   * @var int
   */
  public $sunSet = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'sunRise',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'sunSet',
          'type' => TType::I64,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['sunRise'])) {
                $this->sunRise = $vals['sunRise'];
            }
            if (isset($vals['sunSet'])) {
                $this->sunSet = $vals['sunSet'];
            }
        }
    }

    public function getName()
    {
        return 'Sun';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->sunRise);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->sunSet);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Sun');
        if ($this->sunRise !== null) {
            $xfer += $output->writeFieldBegin('sunRise', TType::I64, 1);
            $xfer += $output->writeI64($this->sunRise);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sunSet !== null) {
            $xfer += $output->writeFieldBegin('sunSet', TType::I64, 2);
            $xfer += $output->writeI64($this->sunSet);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class Moon
{
    public static $_TSPEC;

  /**
   * @var int
   */
  public $moonRise = null;
  /**
   * @var int
   */
  public $moonSet = null;
  /**
   * @var int
   */
  public $moonPhase = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'moonRise',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'moonSet',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'moonPhase',
          'type' => TType::I32,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['moonRise'])) {
                $this->moonRise = $vals['moonRise'];
            }
            if (isset($vals['moonSet'])) {
                $this->moonSet = $vals['moonSet'];
            }
            if (isset($vals['moonPhase'])) {
                $this->moonPhase = $vals['moonPhase'];
            }
        }
    }

    public function getName()
    {
        return 'Moon';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->moonRise);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->moonSet);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->moonPhase);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Moon');
        if ($this->moonRise !== null) {
            $xfer += $output->writeFieldBegin('moonRise', TType::I64, 1);
            $xfer += $output->writeI64($this->moonRise);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->moonSet !== null) {
            $xfer += $output->writeFieldBegin('moonSet', TType::I64, 2);
            $xfer += $output->writeI64($this->moonSet);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->moonPhase !== null) {
            $xfer += $output->writeFieldBegin('moonPhase', TType::I32, 3);
            $xfer += $output->writeI32($this->moonPhase);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class Aqi
{
    public static $_TSPEC;

  /**
   * @var int
   */
  public $value = null;
  /**
   * @var int
   */
  public $level = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var int
   */
  public $co = null;
  /**
   * @var int
   */
  public $no2 = null;
  /**
   * @var int
   */
  public $o3 = null;
  /**
   * @var int
   */
  public $pm10 = null;
  /**
   * @var int
   */
  public $pm25 = null;
  /**
   * @var int
   */
  public $so2 = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'value',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'level',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'co',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'no2',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'o3',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'pm10',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pm25',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'so2',
          'type' => TType::I32,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['value'])) {
                $this->value = $vals['value'];
            }
            if (isset($vals['level'])) {
                $this->level = $vals['level'];
            }
            if (isset($vals['desc'])) {
                $this->desc = $vals['desc'];
            }
            if (isset($vals['co'])) {
                $this->co = $vals['co'];
            }
            if (isset($vals['no2'])) {
                $this->no2 = $vals['no2'];
            }
            if (isset($vals['o3'])) {
                $this->o3 = $vals['o3'];
            }
            if (isset($vals['pm10'])) {
                $this->pm10 = $vals['pm10'];
            }
            if (isset($vals['pm25'])) {
                $this->pm25 = $vals['pm25'];
            }
            if (isset($vals['so2'])) {
                $this->so2 = $vals['so2'];
            }
        }
    }

    public function getName()
    {
        return 'Aqi';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->value);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->level);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->desc);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->co);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->no2);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->o3);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->pm10);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->pm25);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->so2);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Aqi');
        if ($this->value !== null) {
            $xfer += $output->writeFieldBegin('value', TType::I32, 1);
            $xfer += $output->writeI32($this->value);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->level !== null) {
            $xfer += $output->writeFieldBegin('level', TType::I32, 2);
            $xfer += $output->writeI32($this->level);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->desc !== null) {
            $xfer += $output->writeFieldBegin('desc', TType::STRING, 3);
            $xfer += $output->writeString($this->desc);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->co !== null) {
            $xfer += $output->writeFieldBegin('co', TType::I32, 4);
            $xfer += $output->writeI32($this->co);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->no2 !== null) {
            $xfer += $output->writeFieldBegin('no2', TType::I32, 5);
            $xfer += $output->writeI32($this->no2);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->o3 !== null) {
            $xfer += $output->writeFieldBegin('o3', TType::I32, 6);
            $xfer += $output->writeI32($this->o3);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pm10 !== null) {
            $xfer += $output->writeFieldBegin('pm10', TType::I32, 7);
            $xfer += $output->writeI32($this->pm10);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pm25 !== null) {
            $xfer += $output->writeFieldBegin('pm25', TType::I32, 8);
            $xfer += $output->writeI32($this->pm25);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->so2 !== null) {
            $xfer += $output->writeFieldBegin('so2', TType::I32, 9);
            $xfer += $output->writeI32($this->so2);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class Index
{
    public static $_TSPEC;

  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $level = null;
  /**
   * @var int
   */
  public $code = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'level',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['description'])) {
                $this->description = $vals['description'];
            }
            if (isset($vals['title'])) {
                $this->title = $vals['title'];
            }
            if (isset($vals['level'])) {
                $this->level = $vals['level'];
            }
            if (isset($vals['code'])) {
                $this->code = $vals['code'];
            }
        }
    }

    public function getName()
    {
        return 'Index';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->description);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->title);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->level);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->code);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Index');
        if ($this->description !== null) {
            $xfer += $output->writeFieldBegin('description', TType::STRING, 1);
            $xfer += $output->writeString($this->description);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->title !== null) {
            $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
            $xfer += $output->writeString($this->title);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->level !== null) {
            $xfer += $output->writeFieldBegin('level', TType::STRING, 3);
            $xfer += $output->writeString($this->level);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->code !== null) {
            $xfer += $output->writeFieldBegin('code', TType::I32, 4);
            $xfer += $output->writeI32($this->code);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class Forecast
{
    public static $_TSPEC;

  /**
   * @var int
   */
  public $iconDay = null;
  /**
   * @var int
   */
  public $iconNight = null;
  /**
   * @var string
   */
  public $conditionDay = null;
  /**
   * @var string
   */
  public $conditionNight = null;
  /**
   * @var int
   */
  public $temperatureDay = null;
  /**
   * @var int
   */
  public $temperatureNight = null;
  /**
   * @var string
   */
  public $windLevelDay = null;
  /**
   * @var string
   */
  public $windLevelNight = null;
  /**
   * @var string
   */
  public $windDirectionDay = null;
  /**
   * @var string
   */
  public $windDirectionNight = null;
  /**
   * @var float
   */
  public $windSpeedDay = null;
  /**
   * @var float
   */
  public $windSpeedNight = null;
  /**
   * @var string
   */
  public $predictDate = null;
  /**
   * @var \Bean\Sun
   */
  public $sun = null;
  /**
   * @var \Bean\Moon
   */
  public $moon = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'iconDay',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'iconNight',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'conditionDay',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'conditionNight',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'temperatureDay',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'temperatureNight',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'windLevelDay',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'windLevelNight',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'windDirectionDay',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'windDirectionNight',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'windSpeedDay',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'windSpeedNight',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'predictDate',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'sun',
          'type' => TType::STRUCT,
          'class' => '\Bean\Sun',
          ),
        15 => array(
          'var' => 'moon',
          'type' => TType::STRUCT,
          'class' => '\Bean\Moon',
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['iconDay'])) {
                $this->iconDay = $vals['iconDay'];
            }
            if (isset($vals['iconNight'])) {
                $this->iconNight = $vals['iconNight'];
            }
            if (isset($vals['conditionDay'])) {
                $this->conditionDay = $vals['conditionDay'];
            }
            if (isset($vals['conditionNight'])) {
                $this->conditionNight = $vals['conditionNight'];
            }
            if (isset($vals['temperatureDay'])) {
                $this->temperatureDay = $vals['temperatureDay'];
            }
            if (isset($vals['temperatureNight'])) {
                $this->temperatureNight = $vals['temperatureNight'];
            }
            if (isset($vals['windLevelDay'])) {
                $this->windLevelDay = $vals['windLevelDay'];
            }
            if (isset($vals['windLevelNight'])) {
                $this->windLevelNight = $vals['windLevelNight'];
            }
            if (isset($vals['windDirectionDay'])) {
                $this->windDirectionDay = $vals['windDirectionDay'];
            }
            if (isset($vals['windDirectionNight'])) {
                $this->windDirectionNight = $vals['windDirectionNight'];
            }
            if (isset($vals['windSpeedDay'])) {
                $this->windSpeedDay = $vals['windSpeedDay'];
            }
            if (isset($vals['windSpeedNight'])) {
                $this->windSpeedNight = $vals['windSpeedNight'];
            }
            if (isset($vals['predictDate'])) {
                $this->predictDate = $vals['predictDate'];
            }
            if (isset($vals['sun'])) {
                $this->sun = $vals['sun'];
            }
            if (isset($vals['moon'])) {
                $this->moon = $vals['moon'];
            }
        }
    }

    public function getName()
    {
        return 'Forecast';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->iconDay);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->iconNight);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->conditionDay);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->conditionNight);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->temperatureDay);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->temperatureNight);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->windLevelDay);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->windLevelNight);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->windDirectionDay);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->windDirectionNight);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
              $xfer += $input->readDouble($this->windSpeedDay);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
              $xfer += $input->readDouble($this->windSpeedNight);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->predictDate);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
              $this->sun = new \Bean\Sun();
              $xfer += $this->sun->read($input);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRUCT) {
              $this->moon = new \Bean\Moon();
              $xfer += $this->moon->read($input);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Forecast');
        if ($this->iconDay !== null) {
            $xfer += $output->writeFieldBegin('iconDay', TType::I32, 1);
            $xfer += $output->writeI32($this->iconDay);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->iconNight !== null) {
            $xfer += $output->writeFieldBegin('iconNight', TType::I32, 2);
            $xfer += $output->writeI32($this->iconNight);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->conditionDay !== null) {
            $xfer += $output->writeFieldBegin('conditionDay', TType::STRING, 3);
            $xfer += $output->writeString($this->conditionDay);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->conditionNight !== null) {
            $xfer += $output->writeFieldBegin('conditionNight', TType::STRING, 4);
            $xfer += $output->writeString($this->conditionNight);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->temperatureDay !== null) {
            $xfer += $output->writeFieldBegin('temperatureDay', TType::I32, 5);
            $xfer += $output->writeI32($this->temperatureDay);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->temperatureNight !== null) {
            $xfer += $output->writeFieldBegin('temperatureNight', TType::I32, 6);
            $xfer += $output->writeI32($this->temperatureNight);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windLevelDay !== null) {
            $xfer += $output->writeFieldBegin('windLevelDay', TType::STRING, 7);
            $xfer += $output->writeString($this->windLevelDay);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windLevelNight !== null) {
            $xfer += $output->writeFieldBegin('windLevelNight', TType::STRING, 8);
            $xfer += $output->writeString($this->windLevelNight);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windDirectionDay !== null) {
            $xfer += $output->writeFieldBegin('windDirectionDay', TType::STRING, 9);
            $xfer += $output->writeString($this->windDirectionDay);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windDirectionNight !== null) {
            $xfer += $output->writeFieldBegin('windDirectionNight', TType::STRING, 10);
            $xfer += $output->writeString($this->windDirectionNight);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windSpeedDay !== null) {
            $xfer += $output->writeFieldBegin('windSpeedDay', TType::DOUBLE, 11);
            $xfer += $output->writeDouble($this->windSpeedDay);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windSpeedNight !== null) {
            $xfer += $output->writeFieldBegin('windSpeedNight', TType::DOUBLE, 12);
            $xfer += $output->writeDouble($this->windSpeedNight);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->predictDate !== null) {
            $xfer += $output->writeFieldBegin('predictDate', TType::STRING, 13);
            $xfer += $output->writeString($this->predictDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sun !== null) {
            if (!is_object($this->sun)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sun', TType::STRUCT, 14);
            $xfer += $this->sun->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->moon !== null) {
            if (!is_object($this->moon)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('moon', TType::STRUCT, 15);
            $xfer += $this->moon->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class Hourly
{
    public static $_TSPEC;

  /**
   * @var int
   */
  public $icon = null;
  /**
   * @var string
   */
  public $condition = null;
  /**
   * @var int
   */
  public $temperature = null;
  /**
   * @var int
   */
  public $realfeel = null;
  /**
   * @var int
   */
  public $humidity = null;
  /**
   * @var int
   */
  public $pressure = null;
  /**
   * @var int
   */
  public $windLevel = null;
  /**
   * @var string
   */
  public $windDir = null;
  /**
   * @var int
   */
  public $uvi = null;
  /**
   * @var float
   */
  public $windSpeed = null;
  /**
   * @var int
   */
  public $dewPoint = null;
  /**
   * @var int
   */
  public $predictTime = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'icon',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'condition',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'temperature',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'realfeel',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'humidity',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'pressure',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'windLevel',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'windDir',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'uvi',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'windSpeed',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'dewPoint',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'predictTime',
          'type' => TType::I64,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['icon'])) {
                $this->icon = $vals['icon'];
            }
            if (isset($vals['condition'])) {
                $this->condition = $vals['condition'];
            }
            if (isset($vals['temperature'])) {
                $this->temperature = $vals['temperature'];
            }
            if (isset($vals['realfeel'])) {
                $this->realfeel = $vals['realfeel'];
            }
            if (isset($vals['humidity'])) {
                $this->humidity = $vals['humidity'];
            }
            if (isset($vals['pressure'])) {
                $this->pressure = $vals['pressure'];
            }
            if (isset($vals['windLevel'])) {
                $this->windLevel = $vals['windLevel'];
            }
            if (isset($vals['windDir'])) {
                $this->windDir = $vals['windDir'];
            }
            if (isset($vals['uvi'])) {
                $this->uvi = $vals['uvi'];
            }
            if (isset($vals['windSpeed'])) {
                $this->windSpeed = $vals['windSpeed'];
            }
            if (isset($vals['dewPoint'])) {
                $this->dewPoint = $vals['dewPoint'];
            }
            if (isset($vals['predictTime'])) {
                $this->predictTime = $vals['predictTime'];
            }
        }
    }

    public function getName()
    {
        return 'Hourly';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->icon);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->condition);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->temperature);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->realfeel);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->humidity);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->pressure);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->windLevel);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->windDir);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->uvi);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
              $xfer += $input->readDouble($this->windSpeed);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->dewPoint);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->predictTime);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Hourly');
        if ($this->icon !== null) {
            $xfer += $output->writeFieldBegin('icon', TType::I32, 1);
            $xfer += $output->writeI32($this->icon);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->condition !== null) {
            $xfer += $output->writeFieldBegin('condition', TType::STRING, 2);
            $xfer += $output->writeString($this->condition);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->temperature !== null) {
            $xfer += $output->writeFieldBegin('temperature', TType::I32, 3);
            $xfer += $output->writeI32($this->temperature);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->realfeel !== null) {
            $xfer += $output->writeFieldBegin('realfeel', TType::I32, 4);
            $xfer += $output->writeI32($this->realfeel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->humidity !== null) {
            $xfer += $output->writeFieldBegin('humidity', TType::I32, 5);
            $xfer += $output->writeI32($this->humidity);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pressure !== null) {
            $xfer += $output->writeFieldBegin('pressure', TType::I32, 6);
            $xfer += $output->writeI32($this->pressure);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windLevel !== null) {
            $xfer += $output->writeFieldBegin('windLevel', TType::I64, 7);
            $xfer += $output->writeI64($this->windLevel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windDir !== null) {
            $xfer += $output->writeFieldBegin('windDir', TType::STRING, 8);
            $xfer += $output->writeString($this->windDir);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uvi !== null) {
            $xfer += $output->writeFieldBegin('uvi', TType::I32, 9);
            $xfer += $output->writeI32($this->uvi);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->windSpeed !== null) {
            $xfer += $output->writeFieldBegin('windSpeed', TType::DOUBLE, 10);
            $xfer += $output->writeDouble($this->windSpeed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dewPoint !== null) {
            $xfer += $output->writeFieldBegin('dewPoint', TType::I32, 11);
            $xfer += $output->writeI32($this->dewPoint);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->predictTime !== null) {
            $xfer += $output->writeFieldBegin('predictTime', TType::I64, 12);
            $xfer += $output->writeI64($this->predictTime);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class LimitTail
{
    public static $_TSPEC;

  /**
   * @var string
   */
  public $rule = null;
  /**
   * @var string
   */
  public $desc = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'rule',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['rule'])) {
                $this->rule = $vals['rule'];
            }
            if (isset($vals['desc'])) {
                $this->desc = $vals['desc'];
            }
        }
    }

    public function getName()
    {
        return 'LimitTail';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->rule);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->desc);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('LimitTail');
        if ($this->rule !== null) {
            $xfer += $output->writeFieldBegin('rule', TType::STRING, 1);
            $xfer += $output->writeString($this->rule);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->desc !== null) {
            $xfer += $output->writeFieldBegin('desc', TType::STRING, 2);
            $xfer += $output->writeString($this->desc);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class Alert
{
    public static $_TSPEC;

  /**
   * @var int
   */
  public $icon = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $level = null;
  /**
   * @var int
   */
  public $publishTime = null;
  /**
   * @var int
   */
  public $reliveTime = null;
  /**
   * @var string
   */
  public $name = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'icon',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'level',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'publishTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'reliveTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['icon'])) {
                $this->icon = $vals['icon'];
            }
            if (isset($vals['content'])) {
                $this->content = $vals['content'];
            }
            if (isset($vals['title'])) {
                $this->title = $vals['title'];
            }
            if (isset($vals['level'])) {
                $this->level = $vals['level'];
            }
            if (isset($vals['publishTime'])) {
                $this->publishTime = $vals['publishTime'];
            }
            if (isset($vals['reliveTime'])) {
                $this->reliveTime = $vals['reliveTime'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
        }
    }

    public function getName()
    {
        return 'Alert';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->icon);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->content);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->title);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->level);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->publishTime);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->reliveTime);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->name);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Alert');
        if ($this->icon !== null) {
            $xfer += $output->writeFieldBegin('icon', TType::I32, 1);
            $xfer += $output->writeI32($this->icon);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->content !== null) {
            $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
            $xfer += $output->writeString($this->content);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->title !== null) {
            $xfer += $output->writeFieldBegin('title', TType::STRING, 3);
            $xfer += $output->writeString($this->title);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->level !== null) {
            $xfer += $output->writeFieldBegin('level', TType::STRING, 4);
            $xfer += $output->writeString($this->level);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->publishTime !== null) {
            $xfer += $output->writeFieldBegin('publishTime', TType::I64, 5);
            $xfer += $output->writeI64($this->publishTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reliveTime !== null) {
            $xfer += $output->writeFieldBegin('reliveTime', TType::I64, 6);
            $xfer += $output->writeI64($this->reliveTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 7);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class City
{
    public static $_TSPEC;

  /**
   * @var int
   */
  public $cityId = null;
  /**
   * @var int
   */
  public $internal = null;
  /**
   * @var string
   */
  public $citynameCN = null;
  /**
   * @var string
   */
  public $citynameEN = null;
  /**
   * @var string
   */
  public $citynameTW = null;
  /**
   * @var string
   */
  public $citynameHK = null;
  /**
   * @var float
   */
  public $latitude = null;
  /**
   * @var float
   */
  public $longitude = null;
  /**
   * @var int
   */
  public $timezone = null;
  /**
   * @var int
   */
  public $country = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'cityId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'internal',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'citynameCN',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'citynameEN',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'citynameTW',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'citynameHK',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'timezone',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'country',
          'type' => TType::I32,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['cityId'])) {
                $this->cityId = $vals['cityId'];
            }
            if (isset($vals['internal'])) {
                $this->internal = $vals['internal'];
            }
            if (isset($vals['citynameCN'])) {
                $this->citynameCN = $vals['citynameCN'];
            }
            if (isset($vals['citynameEN'])) {
                $this->citynameEN = $vals['citynameEN'];
            }
            if (isset($vals['citynameTW'])) {
                $this->citynameTW = $vals['citynameTW'];
            }
            if (isset($vals['citynameHK'])) {
                $this->citynameHK = $vals['citynameHK'];
            }
            if (isset($vals['latitude'])) {
                $this->latitude = $vals['latitude'];
            }
            if (isset($vals['longitude'])) {
                $this->longitude = $vals['longitude'];
            }
            if (isset($vals['timezone'])) {
                $this->timezone = $vals['timezone'];
            }
            if (isset($vals['country'])) {
                $this->country = $vals['country'];
            }
        }
    }

    public function getName()
    {
        return 'City';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->cityId);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
              $xfer += $input->readI64($this->internal);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->citynameCN);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->citynameEN);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->citynameTW);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->citynameHK);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
              $xfer += $input->readDouble($this->latitude);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
              $xfer += $input->readDouble($this->longitude);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->timezone);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
              $xfer += $input->readI32($this->country);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('City');
        if ($this->cityId !== null) {
            $xfer += $output->writeFieldBegin('cityId', TType::I64, 1);
            $xfer += $output->writeI64($this->cityId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->internal !== null) {
            $xfer += $output->writeFieldBegin('internal', TType::I64, 2);
            $xfer += $output->writeI64($this->internal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->citynameCN !== null) {
            $xfer += $output->writeFieldBegin('citynameCN', TType::STRING, 3);
            $xfer += $output->writeString($this->citynameCN);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->citynameEN !== null) {
            $xfer += $output->writeFieldBegin('citynameEN', TType::STRING, 4);
            $xfer += $output->writeString($this->citynameEN);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->citynameTW !== null) {
            $xfer += $output->writeFieldBegin('citynameTW', TType::STRING, 5);
            $xfer += $output->writeString($this->citynameTW);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->citynameHK !== null) {
            $xfer += $output->writeFieldBegin('citynameHK', TType::STRING, 6);
            $xfer += $output->writeString($this->citynameHK);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->latitude !== null) {
            $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 7);
            $xfer += $output->writeDouble($this->latitude);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->longitude !== null) {
            $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 8);
            $xfer += $output->writeDouble($this->longitude);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timezone !== null) {
            $xfer += $output->writeFieldBegin('timezone', TType::I32, 9);
            $xfer += $output->writeI32($this->timezone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->country !== null) {
            $xfer += $output->writeFieldBegin('country', TType::I32, 10);
            $xfer += $output->writeI32($this->country);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class Festival
{
    public static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
        }
    }

    public function getName()
    {
        return 'Festival';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::STRING) {
              $xfer += $input->readString($this->name);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Festival');
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class ConditionAndAqi
{
    public static $_TSPEC;

  /**
   * @var \Bean\Condition
   */
  public $condition = null;
  /**
   * @var \Bean\Aqi
   */
  public $aqi = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
        1 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\Bean\Condition',
          ),
        2 => array(
          'var' => 'aqi',
          'type' => TType::STRUCT,
          'class' => '\Bean\Aqi',
          ),
        );
        }
        if (is_array($vals)) {
            if (isset($vals['condition'])) {
                $this->condition = $vals['condition'];
            }
            if (isset($vals['aqi'])) {
                $this->aqi = $vals['aqi'];
            }
        }
    }

    public function getName()
    {
        return 'ConditionAndAqi';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
        case 1:
          if ($ftype == TType::STRUCT) {
              $this->condition = new \Bean\Condition();
              $xfer += $this->condition->read($input);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
              $this->aqi = new \Bean\Aqi();
              $xfer += $this->aqi->read($input);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ConditionAndAqi');
        if ($this->condition !== null) {
            if (!is_object($this->condition)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 1);
            $xfer += $this->condition->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aqi !== null) {
            if (!is_object($this->aqi)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('aqi', TType::STRUCT, 2);
            $xfer += $this->aqi->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}
